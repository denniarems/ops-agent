# ZapGap Agent Environment Configuration
# =====================================
# Copy this file to .env and fill in your actual values
# Never commit the .env file with real credentials to version control

# AWS Credentials (LEGACY SUPPORT - OPTIONAL)
# -------------------------------------------
# These environment variables provide backward compatibility for existing setups.
# The new preferred method is to use Runtime Context for dynamic credential injection.
# See docs/AWS_RUNTIME_CONTEXT.md for the new approach.

# Your AWS access key ID - obtain from AWS IAM console
# Note: Can be overridden by Runtime Context at agent invocation time
AWS_ACCESS_KEY_ID=your_aws_access_key_id_here

# Your AWS secret access key - obtain from AWS IAM console
# Note: Can be overridden by Runtime Context at agent invocation time
AWS_SECRET_ACCESS_KEY=your_aws_secret_access_key_here

# AWS Configuration (OPTIONAL)
# ----------------------------
# AWS region for your resources (default: us-east-1)
# Note: Can be overridden by Runtime Context at agent invocation time
AWS_DEFAULT_REGION=us-east-1

# AWS output format for CLI commands (default: json)
AWS_DEFAULT_OUTPUT=json

# AWS session token (only needed if using temporary credentials)
# Note: Can be overridden by Runtime Context at agent invocation time
# AWS_SESSION_TOKEN=your_temporary_session_token_here

# Application Configuration
# -------------------------
# Node.js environment mode
NODE_ENV=production

# Application log level (debug, info, warn, error)
LOG_LEVEL=info

# Application port (should match the exposed port in docker-compose.yml)
PORT=4111

# Mastra Configuration (if applicable)
# -----------------------------------
# Mastra API key or configuration
# MASTRA_API_KEY=your_mastra_api_key_here

# Mastra environment or workspace
# MASTRA_WORKSPACE=your_workspace_name

# Database Configuration (if applicable)
# -------------------------------------
# Database connection string or URL
# DATABASE_URL=postgresql://user:password@localhost:5432/zapgap

# Redis configuration for caching/sessions (if applicable)
# REDIS_URL=redis://localhost:6379

# Security Configuration
# ----------------------
# JWT secret for authentication (generate a strong random string)
# JWT_SECRET=your_jwt_secret_here

# API keys for external services
# API_KEY_SERVICE_1=your_api_key_here
# API_KEY_SERVICE_2=your_api_key_here

# Development Configuration (uncomment for development)
# ----------------------------------------------------
# Enable development features
# DEBUG=true

# Hot reload configuration
# WATCH_FILES=true

# Development database (if different from production)
# DEV_DATABASE_URL=postgresql://user:password@localhost:5432/zapgap_dev

# Example Values for Testing (DO NOT USE IN PRODUCTION)
# -----------------------------------------------------
# These are example values for testing purposes only
# Replace with your actual credentials before running

# Example AWS credentials (REPLACE WITH REAL VALUES):
# AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE
# AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
# AWS_DEFAULT_REGION=us-west-2

# Runtime Context Configuration (NEW PREFERRED METHOD)
# ====================================================
# The new Runtime Context system allows dynamic credential injection at agent invocation time.
# This provides better security, multi-tenant support, and testing flexibility.
#
# Benefits of Runtime Context:
# - Multi-tenant credential management
# - Dynamic credential switching without restarts
# - Better security isolation
# - Easy testing with mock credentials
# - Backward compatibility with environment variables
#
# Usage Examples:
# See docs/AWS_RUNTIME_CONTEXT.md for comprehensive documentation
# See src/examples/aws-runtime-context-examples.ts for code examples
#
# Basic Runtime Context Usage:
# ```typescript
# import { createAWSRuntimeContextWithCredentials } from './mastra/utils/aws-runtime-context';
#
# const runtimeContext = createAWSRuntimeContextWithCredentials({
#   accessKeyId: 'YOUR_ACCESS_KEY',
#   secretAccessKey: 'YOUR_SECRET_KEY'
# }, {
#   region: 'us-east-1'
# }, {
#   tenantId: 'your-tenant-id',
#   environment: 'production'
# });
#
# const result = await agent.generate('Your prompt', { runtimeContext });
# ```

# Multi-Tenant Configuration (OPTIONAL)
# -------------------------------------
# Default tenant ID for multi-tenant environments
# Can be overridden by Runtime Context
TENANT_ID=default

# Maximum resources per tenant (security limit)
MAX_RESOURCES_PER_TENANT=100

# Allowed resource types (comma-separated, optional)
# ALLOWED_RESOURCE_TYPES=AWS::S3::Bucket,AWS::EC2::Instance,AWS::RDS::DBInstance

# Resource tag prefix for organization
RESOURCE_TAG_PREFIX=zapgap

# Security Notes:
# ---------------
# 1. Never commit this file with real credentials to version control
# 2. Use AWS IAM roles in production environments when possible
# 3. Rotate credentials regularly
# 4. Use least-privilege access policies
# 5. Consider using AWS Secrets Manager or similar for sensitive data
# 6. Ensure .env is listed in your .gitignore file
# 7. PREFERRED: Use Runtime Context for dynamic credential management
# 8. Environment variables are now fallback/legacy support only
